@model IList<sellerproto.ViewModels.WalletBalance>
@{
    ViewData["Title"] = "Balance";
}

<h4>@ViewData["Title"] <small>DefaultWallet demo</small></h4>

@foreach (var walletBalance in Model) {
    <div>
        <h3>
            @walletBalance.Balance 
            <small>@walletBalance.Currency</small>
        </h3>
    </div>
} 


<!-- div>
UserClaims: @ViewData["UserClaims"]
</div -->


@section scripts {
    <script>
        
    var walletChange$ = new Rx.Subject();


    var reloader = walletChange$.subscribe(function() {
        $(".body-content").load("/wallet?onlyContent=true");
    });
    var debugSub = walletChange$.subscribe(console.log);

    var walletId = 'DefaultWallet';
    var connection;
    
    $(document).ready(function(){

        connection = connection = new signalR.HubConnectionBuilder()
                                             .withUrl("/transactionHub")
                                             .configureLogging(signalR.LogLevel.Information)
                                             .build();

        connection.on("WalletDepositRegistered", function (walletId, depositId, amount, currency) {
            Toastify({
                    text: "WalletDepositRegistered: " + amount + " " + currency,
                    duration: 10000,
                    gravity: "bottom",
                    positionLeft: false,
                    close: true,
                    }).showToast();
                    
            walletChange$.next({amount: amount, currency: currency});
        });
        
        connection.on("PurchaseOrderAccepted", function (storeID, purchaseOrderId, walletId, amount, currency) {
            Toastify({
                    text: "Accepted: " + amount + " " + currency,
                    duration: 3000,
                    gravity: "bottom",
                    positionLeft: false,
                    close: true,
                    }).showToast();
            var price = 0 - parseFloat(amount);
            
            walletChange$.next({amount: -parseFloat(amount), currency: currency});
        });
        
        connection.start().then(function() {
            connection.send('Subscribe', 'Wallet' + walletId);
        });

        $('#deposit').on('submit', function(e){
            sendDepositTask(e.target);
            e.target.reset();
            return false;
        })
    });
    </script>
}